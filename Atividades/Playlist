Algoritmo "Playlist"

tipo
   playlist = registro

      nome : caracter
      album : caracter
      gravadora : caracter
      ano : inteiro
      genero : caracter
      artista : caracter
      duracao : real
      escutada : logico
      nota : real
      slot : logico        {Vai servir para identificar se um espaço no vetor tem uma música registrada ou não.}
                           {Falso = Espaço livre, Verdadeiro = Música registrada.}

   fimregistro

procedimento visualizar (view : inteiro):  {Visualização geral da playlist com informação resumidas a Posição, Nome, Duração e Nota pessoal.}
var

inicio
   se espaco > 0 entao     {Garante que exista ao menos uma música registrada na playlist}
      para i de 1 ate tamanho faca                 {Manipulação de vetor usando o tamanho da playlist como base}
         se MinhaPlaylist[i].slot = verdadeiro entao     {Apenas irá mostrar os espaço que tiverem o slot verdadeiro, ou seja, os espaços que tiverem músicas registradas}
            escreval("Posição: ", i, " | Nome: ", MinhaPlaylist[i].nome, " | Duração: ", MinhaPlaylist[i].duracao, " | Nota: ", MinhaPlaylist[i].nota, " | ")
         fimse
      fimpara
   senao
      escreval("Sua playlist está vazia, adicione mais músicas.") {No caso do espaço ser 0, solicita a adição de músicas}
   fimse

fimprocedimento

procedimento adicionar (nova : caracter):  {Procedimento para adicionar uma nova música}
var

inicio
   para i de 1 ate tamanho faca   {Manipulação de vetor, com o intuito de encontrar um espaço vazio na playlist}

      se espaco = tamanho entao   {Impede a adição de uma música caso a playlist esteja lotada}
         escreval("Sua playlist está lotada, delete alguma música para registrar um nova.")
         interrompa
      fimse

      se MinhaPlaylist[i].slot = falso entao    {Procura um espaço vazio na playlist, visto que um espaço preenchido teria o "slot" como verdadeiro}
         escreval("Digite o nome da nova música:")
         leia(MinhaPlaylist[i].nome)

         escreval("Digite o nome do álbum que a música pertence: ")
         leia(MinhaPlaylist[i].album)

         escreval("Digite o nome da gravadora")
         leia(MinhaPlaylist[i].gravadora)

         escreval("Digite o ano de lançamento da música")
         leia(MinhaPlaylist[i].ano)

         escreval("Digite o gênero da música")
         leia(MinhaPlaylist[i].genero)

         escreval("Digite o nome do(a) artista")
         leia(MinhaPlaylist[i].artista)

         escreval("Informe o tempo de duração da música usando '.' ")
         escreval("Exemplo: 3.14")
         leia(MinhaPlaylist[i].duracao)

         MinhaPlaylist[i].slot <- verdadeiro  {Assim como citado acima, ao adicionar uma música, o respectivo o slot do vetor selecionado é colocado como verdadeiro.}
         espaco <- espaco + 1                  {Mantém a contagem de músicas registradas.}

         escreval("Música adicionada com sucesso na posição ", i)
         interrompa
      fimse

   fimpara


fimprocedimento

procedimento remover (remo : caracter): {Função para remover uma música}
var
   indice, verify : inteiro
inicio
   escreval("Você prefere remover a música digitando a posição em que ela se encontra ou digitando o nome da música?")    {Contexto}
   escreval("Exemplo: A música hino do inter se localiza na posição 2, então você digitará o número 2 para removê-la.")
   escreval("")
   escreval("Digite 1 para remoção por posiçao, Digite 2 pare remoção por nome ou Digite outra tecla qualquer para cancelar.")
   leia(remo)

   escolha remo {Essa linha vai definir se o usuário vai remover a música digitando ela pela posição que ela pertence ou pelo nome.}

   caso "1"

      escreval("Digite a posição referente a música que deseja remover: ")
      leia(indice)
      se (indice > tamanho) OU (indice <= 0) entao   {Evita um overflow de memória ou uma posição inválida}
         escreval("Posição inválida, tente novamente.")
         remover("")  {Chama o procedimento novamente, fazendo com que ele resete}
      senao
         se MinhaPlaylist[indice].slot = verdadeiro entao {Garante que a posição digitada contém uma música registrada.}
            MinhaPlaylist[indice].slot <- falso   {Caso tenha, o slot é setado como espaço vazio ao definir como "falso".}
            escreval("A música referente a posição ", indice, " foi apagado")
            espaco <- espaco - 1     {Remove 1 de espaço}
         senao
            escreval("Posição inválida, tente novamente.") {Caso o espaço selecionado seja válido mas não tenha uma música registrada:}
            remover("")  {Chama o procedimento novamente, fazendo com que ele resete}
         fimse
      fimse



   caso "2"  {Remoção por nome}
      escreval("Digite exatamente o nome da música que deseja remover: ")
      leia(remo)      {O usuário digita o nome da música que deseja remover}
      para i de 1 ate tamanho faca {Percorre a playlist}
         se (remo = MinhaPlaylist[i].nome) E (MinhaPlaylist[i].slot = verdadeiro) entao {Verifica item por item se alguma música da playlist tem o mesmo nome que o valor dado pelo usuário.}
                                                                                    {Também garante que a música esteja registrada, "Slot verdadeiro"}
            MinhaPlaylist[i].slot <- falso  {Caso tenha, o slot é setado como espaço vazio ao definir como "falso".}

            escreval("A música referente a posição ", i, " foi apagado")
            espaco <- espaco - 1 {Remove 1 de espaço}
            verify <- 1 {Variável que confirma a remoção.}
            interrompa {interrompe o processo assim que a música foi achada para evitar desperdício na memória.}
         fimse

      fimpara
      se verify <> 1 entao {Mostra ao usuário que a música não foi encontrada.}
         escreval("Nome não encontrado")
      fimse

   outrocaso
      escreval("Remoção cancelada.") {Contexto se a remoção for cancelada}

   fimescolha

fimprocedimento

procedimento buscar (busca : caracter): {Procedimento de busca}
var
   indice, verify : inteiro

inicio
   escreval("Você prefere buscar a música digitando a posição em que ela se encontra ou digitando o nome da música?")
   escreval("Exemplo: A música hino do inter se localiza na posição 2, então você digitará o número 2 para buscá-la.")
   escreval("")
   escreval("Digite 1 para buscar por posiçao OU Digite 2 pare buscar por nome.")
   escreval("Caso deseje cancelar a busca, Digite 0")
   leia(busca) {Essa linha vai definir se o usuário vai buscar a música digitando ela pela posição que ela pertence ou pelo nome.}

   escolha busca  {Comando de decisão}

   caso "1" 
      escreval("Digite a posição referente a música que deseja buscar: ")
      leia(indice) {Evita um overflow de memória}
      se (indice > tamanho) ou (indice <= 0) entao
         error("")
         buscar("") {Reseta função e erro}
      senao
         se MinhaPlaylist[indice].slot = verdadeiro entao {Verifica se existe uma música registrada no espaço de i e então mostra todas as informações do espaço i do vetor}
            escreval("Nome : ", MinhaPlaylist[indice].nome, " | Albúm: ", MinhaPlaylist[indice].album, " | Gravadora: ", MinhaPlaylist[indice].gravadora, " | Ano: ", MinhaPlaylist[indice].ano, " | Gênero: ", MinhaPlaylist[indice].genero, " | Artista: ", MinhaPlaylist[indice].artista, " | Duração: ", MinhaPlaylist[indice].duracao, " | Nota: ", MinhaPlaylist[indice].nota, " | Escutada: ", MinhaPlaylist[indice].escutada, " | ")
         senao
            error("")
            buscar("") {Reseta função e erro}
         fimse
      fimse


   caso "2"
      escreval("Digite o exato nome da música que deseja buscar ")
      leia(busca) {Lê o nome exato da músico que o leitor quer}
      para indice de 1 ate tamanho faca                     {Percorre o vetor verificando se existe uma música idêntica registrada na playlist}
         se (busca = MinhaPlaylist[indice].nome) E (MinhaPlaylist[indice].slot = verdadeiro) entao
            escreval("Nome : ", MinhaPlaylist[indice].nome, " | Albúm: ", MinhaPlaylist[indice].album, " | Gravadora: ", MinhaPlaylist[indice].gravadora, " | Ano: ", MinhaPlaylist[indice].ano, " | Gênero: ", MinhaPlaylist[indice].genero, " | Artista: ", MinhaPlaylist[indice].artista, " | Duração: ", MinhaPlaylist[indice].duracao, " | Nota: ", MinhaPlaylist[indice].nota, " | Escutada: ", MinhaPlaylist[indice].escutada, " | ")
            verify <- 1 {Verifica}
            interrompa
         fimse
      fimpara
      se verify <> 1 entao {Se não estiver verificado, informa o erro}
         escreval("Nome não encontrado")
      fimse

   caso "0"
      escreval("Interrompendo busca...")

   outrocaso
      error("")
      buscar("")
   fimescolha

fimprocedimento

procedimento escutar (escutas : caracter): {Simula escutar a música}
var
   indice, verify : inteiro
   name : caracter
inicio
   escreval("Selecione a música que deseja escutar: ")
   escreval("Você prefere selecionar a música digitando a posição em que ela se encontra ou digitando o nome da música?")
   escreval("Exemplo: A música hino do inter se localiza na posição 2, então você digitará o número 2 para escutá-la.")
   escreval("")
   escreval("Digite 1 para escutar por posiçao, Digite 2 para escutar por nome OU Digite 3 para usar o modo aleatório.")
   escreval("Caso deseje cancelar a busca, Digite 0")
   leia(escutas) {Novamente, escolha de meio de busca, só que dessa vez introduzindo o fator aleatório}

   escolha escutas

   caso "1"
      escreval("Digite a posição referente a música que deseja escutar: ")   
      leia(indice) {Lê a posição}
      se (indice > tamanho) ou (indice <= 0) entao {Impedir overflow}
         error("")
         escutar("")
      senao
         se MinhaPlaylist[indice].slot = verdadeiro entao                  {Verifica se a música existe e então passa aloca o "escutada" como verdadeiro}
            escreval("A música que você escutou foi: ", MinhaPlaylist[indice].nome)
            MinhaPlaylist[indice].escutada <- verdadeiro

            MinhaPlaylist[indice].nota <- avaliacao(MinhaPlaylist[indice].nota) {Envia a música para avaliação opcional}

         senao
            error("") {reseta}
            escutar("")
         fimse
      fimse

   caso "2"
      escreval("Digite o exato nome da música que deseja escutar ")
      leia(name)
      para indice de 1 ate tamanho faca
         se (name = MinhaPlaylist[indice].nome) E (MinhaPlaylist[indice].slot = verdadeiro) entao {Verifica o vetor inteiro procurando pelo nome}
            escreval("A música que você escutou foi: ", MinhaPlaylist[indice].nome)
            MinhaPlaylist[indice].escutada <- verdadeiro

            MinhaPlaylist[indice].nota <- avaliacao(MinhaPlaylist[indice].nota)
            verify <- 1
            interrompa
         fimse

      fimpara
      se verify <> 1 entao
         escreval("Música não encontrada.")
      fimse

   caso "3"
      se espaco = 0 entao           {Verifica se existem músicas a serem tocadas}
         error("")
         escreval("Adicione uma música antes.")
      senao
         repita
            repita
               indice <- randi(tamanho + 1) {Gera um número aleatório ATÉ encontrar alguma música com o slot verdadeiro e o designa para a posição do vetor, garante que o número é diferente de 0}
            ate indice > 0
         ate MinhaPlaylist[indice].slot = verdadeiro   {}
         escreval("A música que você escutou foi: ", MinhaPlaylist[indice].nome)
         MinhaPlaylist[indice].escutada <- verdadeiro

         MinhaPlaylist[indice].nota <- avaliacao(MinhaPlaylist[indice].nota) {Avaliação}
      fimse




   caso "0"
      escreval("Fechando Player de Música...")

   fimescolha

fimprocedimento

procedimento organizar (meio : caracter):

var
   n1, n2 : inteiro
   buff : playlist

inicio
   escreval("========================================")
   escreval("Como você deseja organizar sua playlist?")
   escreval("Digite 1 para organizar manualmente")
   escreval("Digite 2 para organizar em ordem decrescente (Utilizando a duração da música como base)")
   escreval("Digite qualquer outra tecla para sair do menu de organização")
   leia(meio) {Escolhe entre organizar a playlist manualmente ou automaticamente}

   escolha meio

   caso "1"
      escreval("")  {No caso de ser manual, passa a informação das posições para o usuário}
      para i de 1 ate tamanho faca
         escreval("Posição : ", i, " | Nome: ", MinhaPlaylist[i].nome)
      fimpara

      escreval("AVISO: NÃO SELECIONE POSIÇÕES MAIOR QUE O TAMANHO DA PLAYLIST: ", tamanho)

      enquanto (n1 <= 0) ou (n1 > tamanho) faca {evita erros de overglow}
         escreval("PRIMEIRO digite o NÚMERO equivalente a POSIÇÃO da música que deseja TROCAR de lugar.")
         leia(n1)
      fimenquanto
      enquanto (n2 <= 0) ou (n2 > tamanho) faca
         escreval("AGORA digite o NÚMERO equivalente a NOVA POSIÇÃO da música selecionada.")
         leia(n2)
      fimenquanto


      buff <- MinhaPlaylist[n1]   {Utiliza de uma varíavel temporária do tipo Playlist para "guardar" os valores da primeira posição selecionada}
      MinhaPlaylist[n1] <- MinhaPlaylist[n2]  {Transforma o primeiro valor selecionado no segundo}
      MinhaPlaylist[n2] <- buff  {utilizando a variável temporária como apoio, transforma o segundo valor no primeiro, efetivando a troca}

      escreval("Troca bem-sucedida")

   caso "2"
      bubblesort(0)   {explicar na aula}


   fimescolha


fimprocedimento

procedimento bubblesort (num : real):

var
   buffer : playlist
   j : inteiro
   swapcounter : inteiro
inicio

   swapcounter <- -1

   repita
      swapcounter <- 0
      para i de 1 ate tamanho - 1 faca

         se (MinhaPlaylist[i].duracao < MinhaPlaylist[i + 1].duracao) entao
            buffer <- MinhaPlaylist[i]
            MinhaPlaylist[i] <- MinhaPlaylist[i + 1]
            MinhaPlaylist[i + 1] <- buffer
            swapcounter <- swapcounter + 1

         fimse

      fimpara
   ate swapcounter = 0

fimprocedimento

funcao avaliacao (n : real): real {recebe o valor da nota atual da música}
var
   yn : caracter

inicio
   escreval("Deseja dar uma nota a está música?")
   escreval("Digite (Sim) para dar uma nota.")
   escreval("Digite qualquer tecla para não dar uma nota.")
   leia(yn)
                  {Verifica se o usuário deseja quer dar uma nota ou reescrever uma existente para a música}
   se yn = "Sim" entao
      n <- 0
      escreval("Digite a nota de 1 até 10: ")
      enquanto (n <= 0) ou (n > 10) faca {Fornece a nota}
         leia(n)
      fimenquanto


   senao
      retorne n {retorna o valor da nota sem alterá-lo}
   fimse

   retorne n {retorna o  valor alterado}
fimfuncao

procedimento error (erro : caracter):
inicio
   escreval("========================================")
   escreval("")
   escreval("ERRO!")
   escreval("Leitura inválida, tente novamente.")
   escreval("")
   escreval("========================================")

fimprocedimento

funcao menus (botao : caracter): caracter

inicio

   escreval("========================================")
   escreval("")
   escreval("Bem vindo a sua playlist.")
   escreval("")
   escreval("Para visualizar sua playlist, digite 1")
   escreval("Para adicionar uma nova música, digite 2")
   escreval("Para remover uma música já existente, digite 3")
   escreval("")
   escreval("Para buscar por uma música, digite 4")
   escreval("Para escutar uma música, digite 5")
   escreval("Para organizar sua playlist, digite 6")
   escreval("")
   escreval("Para limpar sua tela, digite 'C'")
   escreval("Para fechar sua playlist, digite 0")
   escreval("")
   escreval("========================================")

   leia(botao)

   retorne botao

fimfuncao

var
   MinhaPlaylist : vetor[1..5] de playlist
   i, espaco, tamanho : inteiro
   menu : caracter


inicio

   tamanho <- 5   {Variável que deve corresponder ao tamanho do vetor, com fins de otimização}


   enquanto menu <> "0" faca  {Laço de repetição que irá loopar o menu}

      menu <- menus("0")      {Função que chama o menu e simula a leitura de um botão.}
      escolha menu

      caso "0"
         escreval("Fechando Playlist...")

      caso "1"
         visualizar(0)

      caso "2"
         adicionar("")

      caso "3"
         remover("")

      caso "4"
         buscar("")

      caso "5"
         escutar("")

      caso "6"
         organizar("")

      caso "C"
         limpatela

      fimescolha


   fimenquanto

fimalgoritmo